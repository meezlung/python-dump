# pyright: strict

from collections import Counter
from pytest import raises
from cs12232prac05b import first_digits


def test_first_digits_invalid():
    with raises(ValueError):
        first_digits((1, 1, -1, 1, 1))
    with raises(ValueError):
        first_digits((0, -1, 2, 3, 4, 5, 6, 7, 8, 9))
    with raises(ValueError):
        first_digits((0, 1, 2, -3, 4, 5, 6, 7, 8, 9))
    with raises(ValueError):
        first_digits((0, 1, 2, 3, 4, 5, 6, 7, 8, -9))
    with raises(ValueError):
        first_digits((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -10))

    # larger values
    with raises(ValueError):
        l: list[int] = [10**12]*100000
        l.append(-1)
        first_digits(l)
    with raises(ValueError):
        l: list[int] = [10**12]*100000
        l.append(-9**12)
        first_digits(l)


def test_first_digits_valid():
    assert first_digits((0, 12, 34, 0)) == Counter[int]((0, 1, 3, 0))
    assert first_digits((0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) == Counter[int]((0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    assert first_digits((1, 2, 3, 4, 5, 6, 7, 8, 9)) == first_digits((100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000))

    # time test
    assert first_digits([10**i for i in range(13)]) == Counter[int]((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))
    assert first_digits([10**i for i in range(12)]) == Counter[int]((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))
    assert first_digits([]) == Counter()

    # all zeroes
    countsz: Counter[int] = first_digits((0, 0, 0, 0, 0, 0, 0))
    expected_counts = {0: 7}
    assert countsz == expected_counts

    assert countsz != {0: 6}

    # data from Pike County
    counts1: Counter[int] = first_digits((
            31, 41, 59, 26, 53, 58, 97, 93, 23, 84, 62, 64, 33, 83, 27, 95,  2, 88, 41, 97,
            16, 93, 99, 37, 51,  5, 82,  9, 74, 94, 45, 92, 30, 78, 16, 40, 62, 86, 20, 89,
            98, 62, 80, 34, 82, 53, 42, 11, 70, 67, 98, 21, 48,  8, 65, 13, 28, 23,  6, 64,
            70, 93, 84, 46,  9, 55,  5, 82, 23, 17, 53, 59, 40, 81, 28, 48, 11, 17, 45,  2,
            0, 0, 12
        ))
    
    counts2: Counter[int] = first_digits((
            31, 41, 59, 26, 53, 58, 97, 93, 23, 84, 62, 64, 33, 83, 27, 95,  2, 88, 41, 97,
            16, 93, 99, 37, 51,  5, 82,  9, 74, 94, 45, 92, 30, 78, 16, 40, 62, 86, 20, 89,
            98, 62, 80, 34, 82, 53, 42, 11, 70, 67, 98, 21, 48,  8, 65, 13, 28, 23,  6, 64,
            70, 93, 84, 46,  9, 55,  5, 82, 23, 17, 53, 59, 40, 81, 28, 48, 11, 17, 45,  2,
        ))
    
    counts3: Counter[int] = first_digits((
            31, 41, 59, 26, 53, 58, 97, 93, 23, 84, 62, 64, 33, 83, 27, 95,  2, 88, 41, 97,
            16, 93, 99, 37, 51,  5, 82,  9, 74, 94, 45, 92, 30, 78, 16, 40, 62, 86, 20, 89,
            98, 62, 80, 34, 82, 53, 42, 11, 70, 67, 98, 21, 48,  8, 65, 13, 28, 23,  6, 64,
            70, 93, 84, 46,  9, 55,  5, 82, 23, 17, 53, 59, 40, 81, 28, 48, 11, 17, 45,  2,
            10**12, 10**12, 10**12, 10**12, 10**12, 10**12, 10**12, 10**12, 10**12, 10**12,
            10**12, 10**12, 10**12,10**12, 10**12, 10**12, 10**12, 10**12, 10**12, 10**12,
            20**10, 20**10, 20**10, 20**10, 20**10, 20**10, 20**10, 20**10, 20**10, 20**10,
            20**11, 20**11, 20**11, 20**11, 20**11, 20**11, 20**11, 20**11, 20**11, 20**11,
            30**8, 30**8, 30**8, 30**8, 30**8, 30**8, 30**8, 30**8, 30**8, 30**8, 30**8,
        ))

    counts4: Counter[int] = first_digits((
            31, 41, 59, 26, 53, 58, 97, 93, 23, 84, 62, 64, 33, 83, 27, 95,  2, 88, 41, 97,
            16, 93, 99, 37, 51,  5, 82,  9, 74, 94, 45, 92, 30, 78, 16, 40, 62, 86, 20, 89,
            98, 62, 80, 34, 82, 53, 42, 11, 70, 67, 98, 21, 48,  8, 65, 13, 28, 23,  6, 64,
            70, 93, 84, 46,  9, 55,  5, 82, 23, 17, 53, 59, 40, 81, 28, 48, 11, 17, 45,  2,
            31, 41, 59, 26, 53, 58, 97, 93, 23, 84, 62, 64, 33, 83, 27, 95,  2, 88, 41, 97,
            16, 93, 99, 37, 51,  5, 82,  9, 74, 94, 45, 92, 30, 78, 16, 40, 62, 86, 20, 89,
            98, 62, 80, 34, 82, 53, 42, 11, 70, 67, 98, 21, 48,  8, 65, 13, 28, 23,  6, 64,
            70, 93, 84, 46,  9, 55,  5, 82, 23, 17, 53, 59, 40, 81, 28, 48, 11, 17, 45,  2,
            31, 41, 59, 26, 53, 58, 97, 93, 23, 84, 62, 64, 33, 83, 27, 95,  2, 88, 41, 97,
            16, 93, 99, 37, 51,  5, 82,  9, 74, 94, 45, 92, 30, 78, 16, 40, 62, 86, 20, 89,
            98, 62, 80, 34, 82, 53, 42, 11, 70, 67, 98, 21, 48,  8, 65, 13, 28, 23,  6, 64,
            70, 93, 84, 46,  9, 55,  5, 82, 23, 17, 53, 59, 40, 81, 28, 48, 11, 17, 45,  2,
            31, 41, 59, 26, 53, 58, 97, 93, 23, 84, 62, 64, 33, 83, 27, 95,  2, 88, 41, 97,
            16, 93, 99, 37, 51,  5, 82,  9, 74, 94, 45, 92, 30, 78, 16, 40, 62, 86, 20, 89,
            98, 62, 80, 34, 82, 53, 42, 11, 70, 67, 98, 21, 48,  8, 65, 13, 28, 23,  6, 64,
            70, 93, 84, 46,  9, 55,  5, 82, 23, 17, 53, 59, 40, 81, 28, 48, 11, 17, 45,  2,
        ))
    
    # check keys
    assert set(counts1.keys()) <= set(range(10))
    assert set(counts2.keys()) <= set(range(10))

    # check values
    for key, expected_value in [
            (0, 2),
            (1, 8),
            (2, 11),
            (3, 5),
            (4, 10),
            (5, 10),
            (6, 8),
            (7, 4),
            (8, 12),
            (9, 13),
        ]:
        assert counts1[key] == expected_value

    for key, expected_value in [
            (0, 0),
            (1, 7),
            (2, 11),
            (3, 5),
            (4, 10),
            (5, 10),
            (6, 8),
            (7, 4),
            (8, 12),
            (9, 13),
        ]:
        assert counts2[key] == expected_value

    for key, expected_value in [
            (0, 0),
            (1, 37),
            (2, 21),
            (3, 5),
            (4, 10),
            (5, 10),
            (6, 19),
            (7, 4),
            (8, 12),
            (9, 13),
        ]:
        assert counts3[key] == expected_value

    for key, expected_value in [
            (0, 0),
            (1, 28),
            (2, 44),
            (3, 20),
            (4, 40),
            (5, 40),
            (6, 32),
            (7, 16),
            (8, 48),
            (9, 52),
        ]:
        assert counts4[key] == expected_value
